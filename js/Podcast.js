// Generated by CoffeeScript 1.6.2
(function() {
  var Episode, Podcast, PodcastParseException, Utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  goog.require('goog.dom.xml');

  PodcastParseException = (function() {
    function PodcastParseException(message) {
      this.message = message;
    }

    return PodcastParseException;

  })();

  Utils = (function() {
    function Utils() {}

    Utils.nsResolver = function(prefix) {
      var ns;

      ns = {
        'itunes': 'http://apple.com/itunes/'
      };
      return ns[prefix] || null;
    };

    Utils.selectSingleNodeNS = function(node, path) {
      var doc, selected;

      doc = goog.dom.getOwnerDocument(node);
      selected = doc.evaluate(path, node, Podcast.nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return selected != null ? selected.singleNodeValue : void 0;
    };

    Utils.selectNodesNS = function(node, path) {
      var count, doc, i, nodes, results, _i, _ref;

      doc = goog.dom.getOwnerDocument(node);
      nodes = doc.evaluate(path, node, Podcast.nsResolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      results = [];
      count = nodes.snapshotLength;
      for (i = _i = 0, _ref = count - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    };

    return Utils;

  })();

  Episode = (function() {
    function Episode(title, author, subtitle, summary, art, url, size, type, guid, pubDate, duration) {
      this.title = title;
      this.author = author;
      this.subtitle = subtitle;
      this.summary = summary;
      this.art = art != null ? art : "";
      this.url = url;
      this.size = size != null ? size : "";
      this.type = type != null ? type : "";
      this.guid = guid != null ? guid : "";
      this.pubDate = pubDate != null ? pubDate : "";
      this.duration = duration != null ? duration : "";
      this.size = parseInt(this.size);
      if (this.size <= 0) {
        throw new PodcastParseException("episode " + this.title + " has an invalid size " + this.size);
      }
    }

    Episode.load = function(doc) {
      var art, author, duration, guid, pubDate, size, subtitle, summary, title, type, url, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

      title = (_ref = goog.dom.xml.selectSingleNode(doc, 'title')) != null ? _ref.textContent : void 0;
      author = (_ref1 = Utils.selectSingleNodeNS(doc, 'author')) != null ? _ref1.textContent : void 0;
      subtitle = (_ref2 = Utils.selectSingleNodeNS(doc, 'subtitle')) != null ? _ref2.textContent : void 0;
      summary = (_ref3 = Utils.selectSingleNodeNS(doc, 'summary')) != null ? _ref3.textContent : void 0;
      art = (_ref4 = Utils.selectSingleNodeNS(doc, 'image')) != null ? (_ref5 = _ref4.attributes['href']) != null ? _ref5.textContent : void 0 : void 0;
      size = (_ref6 = goog.dom.xml.selectSingleNode(doc, 'enclosure')) != null ? (_ref7 = _ref6.attributes.getNamedItem('length')) != null ? _ref7.textContent : void 0 : void 0;
      url = (_ref8 = goog.dom.xml.selectSingleNode(doc, 'enclosure')) != null ? (_ref9 = _ref8.attributes['url']) != null ? _ref9.textContent : void 0 : void 0;
      type = (_ref10 = goog.dom.xml.selectSingleNode(doc, 'enclosure')) != null ? (_ref11 = _ref10.attributes['type']) != null ? _ref11.textContent : void 0 : void 0;
      guid = (_ref12 = goog.dom.xml.selectSingleNode(doc, 'guid')) != null ? _ref12.textContent : void 0;
      pubDate = (_ref13 = goog.dom.xml.selectSingleNode(doc, 'pubDate')) != null ? _ref13.textContent : void 0;
      duration = (_ref14 = Utils.selectSingleNodeNS(doc, 'duration')) != null ? _ref14.textContent : void 0;
      return new Episode(title, author, subtitle, summary, art, url, size, type, guid, pubDate, duration);
    };

    return Episode;

  })();

  Podcast = (function() {
    function Podcast(title, link, language, copyright, subtitle, author, email, description, art, categories) {
      this.title = title;
      this.link = link != null ? link : "";
      this.language = language != null ? language : "";
      this.copyright = copyright != null ? copyright : "";
      this.subtitle = subtitle != null ? subtitle : "";
      this.author = author != null ? author : "";
      this.email = email != null ? email : "";
      this.description = description != null ? description : "";
      this.art = art != null ? art : "";
      this.categories = categories != null ? categories : [];
      this.addEpisode = __bind(this.addEpisode, this);
      this.episodes = [];
    }

    Podcast.prototype.addEpisode = function(ep) {
      return this.episodes.push(ep);
    };

    Podcast.loadFromString = function(str) {
      var art, author, cat, categories, cats, channel, copyright, description, doc, email, ep, episodes, eps, language, link, podcast, subtitle, title, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

      doc = goog.dom.xml.loadXml(str);
      channel = goog.dom.xml.selectSingleNode(doc, '/rss/channel');
      title = (_ref = goog.dom.xml.selectSingleNode(channel, 'title')) != null ? _ref.textContent : void 0;
      if (title === null) {
        throw new PodcastParseException('title is null');
      }
      link = (_ref1 = goog.dom.xml.selectSingleNode(channel, 'link')) != null ? _ref1.textContent : void 0;
      language = (_ref2 = goog.dom.xml.selectSingleNode(channel, 'language')) != null ? _ref2.textContent : void 0;
      copyright = (_ref3 = goog.dom.xml.selectSingleNode(channel, 'copyright')) != null ? _ref3.textContent : void 0;
      subtitle = (_ref4 = Utils.selectSingleNodeNS(channel, 'subtitle')) != null ? _ref4.textContent : void 0;
      description = ((_ref5 = goog.dom.xml.selectSingleNode(channel, 'description')) != null ? _ref5.textContent : void 0) || ((_ref6 = Utils.selectSingleNodeNS(channel, 'summary')) != null ? _ref6.textContent : void 0);
      author = (_ref7 = Utils.selectSingleNodeNS(channel, 'author')) != null ? _ref7.textContent : void 0;
      email = (_ref8 = Utils.selectSingleNodeNS(channel, 'email')) != null ? _ref8.textContent : void 0;
      art = (_ref9 = Utils.selectSingleNodeNS(channel, 'image')) != null ? (_ref10 = _ref9.attributes['href']) != null ? _ref10.textContent : void 0 : void 0;
      categories = [];
      cats = Utils.selectNodesNS(channel, 'category');
      for (_i = 0, _len = cats.length; _i < _len; _i++) {
        cat = cats[_i];
        categories.push(cat != null ? (_ref11 = cat.attributes['text']) != null ? _ref11.textContent : void 0 : void 0);
      }
      episodes = [];
      eps = goog.dom.xml.selectNodes(channel, 'item');
      for (_j = 0, _len1 = eps.length; _j < _len1; _j++) {
        ep = eps[_j];
        episodes.push(Episode.load(ep));
      }
      podcast = new Podcast(title, link, language, copyright, subtitle, author, email, description, art, categories);
      for (_k = 0, _len2 = episodes.length; _k < _len2; _k++) {
        ep = episodes[_k];
        podcast.addEpisode(ep);
      }
      return podcast;
    };

    return Podcast;

  })();

  window.podcast = Podcast;

  this.useXml = function() {
    return Podcast.loadFromString("<?xml version=\"1.0\"?>\n<rss version=\"2.0\">\n	<channel>\n		<title>A</title>\n		<link>B</link>\n		<itunes:summary>This is the summary</itunes:summary>\n		<description>C</description>\n		<itunes:subtitle>insane</itunes:subtitle>\n		<itunes:email>usman.ghani@gmail.com</itunes:email>\n		<itunes:author>i am the author</itunes:author>\n		<itunes:image href=\"http://image.com/image\"/>\n		<itunes:category text=\"cat1\"></itunes:category>\n		<itunes:category text=\"cat2\"/>\n		<language>en-us</language>\n		<copyright>D</copyright>\n		<lastBuildDate>Sat, 2 Nov 2013 03:14:37 GMT</lastBuildDate>\n		<generator>tdscripts.com Podcast Generator</generator>\n		<webMaster>F</webMaster>\n		<ttl>1</ttl>\n		<item>\n			<title>G</title>\n			<description>H</description>\n			<pubDate>Sat, 2 Nov 2013 03:14:37 GMT</pubDate>\n			<enclosure length=\"5000000\" type=\"audio/mpeg\" url=\"https://www.dropbox.com/s/l34hmdraj30jtp5/aasmaan_gar_terey_talwoonka.mp3\"/>\n		</item>\n	</channel>\n</rss>");
  };

  this.dbxFileChooser = function(e) {
    return console.log("" + e.files[0].link);
  };

}).call(this);
